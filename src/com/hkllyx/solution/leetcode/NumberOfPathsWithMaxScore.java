package com.hkllyx.solution.leetcode;

import com.hkllyx.solution.util.info.Difficulty;
import com.hkllyx.solution.util.info.Solution;
import com.hkllyx.solution.util.info.Tag;
import com.hkllyx.solution.util.info.Tags;
import com.hkllyx.solution.util.test.Assertions;
import com.hkllyx.solution.util.test.Test;

import java.util.Arrays;
import java.util.List;

/**
 * <p>You are given a square <code>board</code>&nbsp;of characters. You can move on the board starting at the bottom right square marked with the character&nbsp;<code>&#39;S&#39;</code>.</p>
 *
 * <p>You need&nbsp;to reach the top left square marked with the character <code>&#39;E&#39;</code>. The rest of the squares are labeled either with a numeric character&nbsp;<code>1, 2, ..., 9</code> or with an obstacle <code>&#39;X&#39;</code>. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.</p>
 *
 * <p>Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, <strong>taken modulo <code>10^9 + 7</code></strong>.</p>
 *
 * <p>In case there is no path, return&nbsp;<code>[0, 0]</code>.</p>
 *
 * <p>&nbsp;</p>
 * <p><strong>Example 1:</strong></p>
 * <pre><strong>Input:</strong> board = ["E23","2X2","12S"]
 * <strong>Output:</strong> [7,1]
 * </pre><p><strong>Example 2:</strong></p>
 * <pre><strong>Input:</strong> board = ["E12","1X1","21S"]
 * <strong>Output:</strong> [4,2]
 * </pre><p><strong>Example 3:</strong></p>
 * <pre><strong>Input:</strong> board = ["E11","XXX","11S"]
 * <strong>Output:</strong> [0,0]
 * </pre>
 * <p>&nbsp;</p>
 * <p><strong>Constraints:</strong></p>
 *
 * <ul>
 * 	<li><code>2 &lt;= board.length == board[i].length &lt;= 100</code></li>
 * </ul><div><div>Related Topics</div><div><li>Êï∞ÁªÑ</li><li>Âä®ÊÄÅËßÑÂàí</li><li>Áü©Èòµ</li></div></div><br><div><li>üëç 47</li><li>üëé 0</li></div>
 *
 * @author hkllyx
 * @date 2021/03/30
 */
@Solution(no = "1301", difficulty = Difficulty.HARD, url = "https://leetcode-cn.com/problems/number-of-paths-with-max-score/")
public class NumberOfPathsWithMaxScore {

    public static void main(String[] args) {
        Assertions.assertExpect(NumberOfPathsWithMaxScore.class, new int[]{0, 1}, Arrays.asList("EX", "XS"));
        Assertions.assertExpect(NumberOfPathsWithMaxScore.class, new int[]{0, 0}, Arrays.asList("E11", "XXX", "11S"));
        Assertions.assertExpect(NumberOfPathsWithMaxScore.class, new int[]{4, 2}, Arrays.asList("E12", "1X1", "21S"));
        Assertions.assertExpect(NumberOfPathsWithMaxScore.class, new int[]{7, 1}, Arrays.asList("E23", "2X2", "12S"));
        Assertions.assertExpect(NumberOfPathsWithMaxScore.class, new int[]{1773, 690285631}, Arrays.asList(
                "E999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999S"));
    }

    /**
     * Êö¥ÂäõÊûö‰∏æ
     */
    @Deprecated
    public int[] pathsWithMaxScore1(List<String> board) {
        char[][] matrix = new char[board.size()][];
        int i = 0;
        for (String s : board) {
            matrix[i++] = s.toCharArray();
        }
        int[] result = new int[2];
        update1(matrix, 0, 0, 0, result);
        result[1] %= 1_000_000_007;
        return result;
    }

    private void update1(char[][] matrix, int r, int c, int gain, int[] result) {
        if (matrix[r][c] == 'S') {
            if (gain == result[0]) {
                result[1]++;
            } else if (gain > result[0]) {
                result[0] = gain;
                result[1] = 1;
            }
            return;
        }
        if (matrix[r][c] == 'X') {
            return;
        }
        if (matrix[r][c] != 'E') {
            gain += matrix[r][c] - '0';
        }
        if (r + 1 < matrix.length) {
            update1(matrix, r + 1, c, gain, result);
            if (c + 1 < matrix[0].length) {
                update1(matrix, r, c + 1, gain, result);
                update1(matrix, r + 1, c + 1, gain, result);
            }
        } else if (c + 1 < matrix[0].length) {
            update1(matrix, r, c + 1, gain, result);
        }
    }

    /**
     * DPÔºå[i][j] ÁöÑÂâç‰∏ÄÊ≠•ÊòØ [i - 1][j], [i][j - 1], [i - 1][j - 1]
     */
    @Test
    @Tags(Tag.DYNAMIC_PROGRAMMING)
    public int[] pathsWithMaxScore2(List<String> board) {
        int row = board.size();
        int col = board.get(0).length();
        int[][] gain = new int[row][col];
        int[][] path = new int[row][col];
        // ËÆ°ÁÆóÂàùÂßãÂàÜÂÄº
        for (int i = 0; i < row; i++) {
            String s = board.get(i);
            for (int j = 0; j < col; j++) {
                char c = s.charAt(j);
                gain[i][j] = c == 'X' ? -1 : c - '0';
            }
        }
        // Âä®ÊÄÅËÆ°ÁÆóÊØè‰∏Ä‰∏™ÂçïÂÖÉÊ†ºÁöÑÊúÄÂ§ßÂæóÂàÜÂíåÂà∞ËææÊ≠§ÂçïÂÖÉÊ†ºÁöÑË∑ØÂæÑÊï∞
        gain[0][0] = gain[row - 1][col - 1] = 0;
        path[0][0] = 1;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (gain[i][j] == -1) {
                    continue;
                }
                if (i > 0 && j > 0) {
                    int maxGain = 0;
                    if (path[i - 1][j] > maxGain) {
                        path[i][j] = path[i - 1][j];
                        maxGain = gain[i - 1][j];
                    }
                    if (path[i][j - 1] > 0) {
                        if (gain[i][j - 1] > maxGain) {
                            maxGain = gain[i][j - 1];
                            path[i][j] = path[i][j - 1];
                        } else if (gain[i][j - 1] == maxGain) {
                            path[i][j] += path[i][j - 1];
                        }
                    }
                    if (path[i - 1][j - 1] > 0) {
                        if (gain[i - 1][j - 1] > maxGain) {
                            maxGain = gain[i - 1][j - 1];
                            path[i][j] = path[i - 1][j - 1];
                        } else if (gain[i - 1][j - 1] == maxGain) {
                            path[i][j] += path[i - 1][j - 1];
                        }
                    }
                    gain[i][j] += maxGain;
                } else if (i > 0 && path[i - 1][j] > 0) {
                    path[i][j] = path[i - 1][j];
                    gain[i][j] += gain[i - 1][j];
                } else if (j > 0 && path[i][j - 1] > 0) {
                    path[i][j] = path[i][j - 1];
                    gain[i][j] += gain[i][j - 1];
                }
                path[i][j] %= 1_000_000_007;
            }
        }
        return new int[]{gain[row - 1][col - 1], path[row - 1][col - 1]};
    }
}
